import Head from 'next/head';
import { useRouter } from 'next/router';
import { useTranslation } from 'react-i18next';

import React, { useCallback, useEffect, useState } from 'react';

import { Tab, Tabs } from '@mui/material';

import { BackButton } from '@/components/core/buttons/BackButton';
import CardTwo from '@/components/core/cards/CardTwo';
import BarChart from '@/components/core/charts/BarChart';
import LineChart from '@/components/core/charts/LineChart';
import SoldBatchesTable from '@/components/core/tables/SoldBatchesTable';
import { useLoadingStateContext } from '@/providers/LoadingStateContext';
import { useUserAuthContext } from '@/providers/UserAuthProvider';
import { useYearFilterContext } from '@/providers/YearFilterProvider';
import { getAssociations } from '@/services/association';
import { downloadBatchesInExcel, getSoldBatches } from '@/services/batch';
import {
  getTotalSalesGeneralGraph,
  getTotalSalesKgGraph,
} from '@/services/graphics';
import { UserRole } from '@/util/constants/users';
import { Association } from '@/util/models/BasicAssociation';
import { BasicSoldBatch } from '@/util/models/Batch/BasicSoldBatch';
import { Dataset } from '@/util/models/Dataset';
import { PaginationOptions } from '@/util/models/Pagination';
import { saveAs } from 'file-saver';

export default function SoldBatches() {
  const { t } = useTranslation('translation');
  const [associations, setAssociations] = useState<Association[]>();
  const [selectedAssociation, setSelectedAssociation] = useState<number>(0);
  const [soldWeight, setSoldWeight] = useState<number | undefined>();
  const [soldBatches, setSoldBatches] = useState<BasicSoldBatch[]>([]);
  const [salesKg, setSalesKg] = useState<Dataset[]>([]);
  const [salesUsd, setSalesUsd] = useState<Dataset[]>([]);
  const [pagination, setPagination] = useState<PaginationOptions>({
    index: 0,
    limit: 10,
  });

  const { selectedYear } = useYearFilterContext();

  // Loading Context
  const { isLoading, setLoading } = useLoadingStateContext();

  const [totalEntries, setTotalEntries] = useState(0);
  const { userRole } = useUserAuthContext();
  const [batchCodeSearch, setBatchCodeSearch] = useState<string>('');

  const router = useRouter();

  const handleChange = (_: React.SyntheticEvent, newValue: number) => {
    setSelectedAssociation(newValue);
  };

  const setSearchValue = (event: any) => {
    setBatchCodeSearch(event.target.value);
  };

  const downloadSoldBatches = async () => {
    try {
      const response = await downloadBatchesInExcel(true);

      // Save the Blob response as a file using FileSaver.js
      saveAs(response.data, 'Available Batches');
    } catch (err) {
      console.error(err);
    }
  };

  const updatePagination = useCallback(
    (newOptions: PaginationOptions) => {
      setPagination(newOptions);
    },
    [setPagination]
  );

  const submitSearchBatchesByCode = useCallback(() => {
    let assoc = '';

    if (associations && associations.length > 0) {
      if (selectedAssociation >= 1) {
        assoc = associations[selectedAssociation - 1].name;
      }
    }
    setLoading(true);
    getSoldBatches(batchCodeSearch, assoc, pagination, selectedYear).then(
      (data) => {
        setSoldBatches(data.searchBatchesResult.data);
        setSoldWeight(data.kgDryCocoaSold);
        setSalesUsd(getTotalSalesGeneralGraph(data.monthlySalesInUSD));
        setSalesKg(getTotalSalesKgGraph(data.salesInKg));
        setTotalEntries(data.searchBatchesResult.totalEntries);
        setLoading(false);
      }
    );
  }, [
    associations,
    batchCodeSearch,
    selectedAssociation,
    setLoading,
    pagination,
    selectedYear,
  ]);

  useEffect(() => {
    if (userRole && userRole === 'buyer') {
      router.push('/');
    }
  }, [userRole, router]);

  useEffect(() => {
    if (userRole && userRole === UserRole.project) {
      getAssociations().then((assocs) => setAssociations(assocs));
    }
  }, [userRole]);

  useEffect(() => {
    if (userRole && userRole !== UserRole.buyer) submitSearchBatchesByCode();
  }, [selectedAssociation, userRole, pagination]);

  useEffect(() => {
    setPagination({
      index: 0,
      limit: 5,
    });
  }, [selectedYear]);

  return (
    <>
      <Head>
        <title>Aurora - Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/assets/logos/Aurora.png" />
      </Head>
      <div className="dashboard__container">
        <div>
          <BackButton />
          <div className={`dashboard__cards  dashboard__cards--main`}>
            <CardTwo
              backgroundColor="#f1852d"
              number={soldWeight}
              text={t('sold_international_market')}
              icon={'/assets/kilogram.png'}
              loading={isLoading}
              alt={'Kilogram'}
            />
            {userRole === UserRole.association ? (
              <button
                className={'dashboard__download-button'}
                onClick={downloadSoldBatches}
              >
                {t('buttons.download_sold_batches')}
              </button>
            ) : (
              <></>
            )}
          </div>
        </div>
        <div className="dashboard__container-info">
          {userRole === UserRole.association ? (
            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
              <input
                className="dashboard__search"
                type="text"
                placeholder={t('search') ?? ''}
                onChange={setSearchValue}
                onKeyDown={(event) => {
                  if (event.key === 'Enter' && !isLoading) {
                    submitSearchBatchesByCode();
                  }
                }}
              />
            </div>
          ) : (
            ''
          )}

          {associations && userRole == UserRole.project ? (
            <Tabs
              value={selectedAssociation}
              onChange={handleChange}
              variant="scrollable"
              TabIndicatorProps={{
                style: { display: 'none' },
              }}
              TabScrollButtonProps={{
                style: { display: 'flex' },
              }}
              scrollButtons="auto"
              aria-label="scrollable auto tabs example"
            >
              <Tab
                key={-1}
                label={t('home.all')}
                style={{ marginBottom: 10 }}
              />
              {associations.map((item, index) => (
                <Tab
                  key={index}
                  label={item.name}
                  style={{ marginBottom: 10 }}
                />
              ))}
            </Tabs>
          ) : (
            ''
          )}
          <div className="dashboard__cards">
            <div className="dashboard__charts-production">
              <SoldBatchesTable
                batches={soldBatches}
                updatePagination={updatePagination}
                pagination={pagination}
                loading={isLoading}
                totalEntries={totalEntries}
              />
            </div>
          </div>
          <div className="dashboard__charts">
            <div className="dashboard__charts-sales">
              <BarChart
                title={t('home.sales_kg')}
                datasets={salesKg}
                backgroundColor="#f39a1a98"
              />
            </div>
            <div className="dashboard__charts-sales">
              <LineChart
                title={t('home.total_sales_usd')}
                datasets={salesUsd}
                backgroundColor="#c9732190"
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
