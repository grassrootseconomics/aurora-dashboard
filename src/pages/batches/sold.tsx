import Head from 'next/head';
import { useRouter } from 'next/router';
import { useTranslation } from 'react-i18next';
import React, { useEffect, useState } from 'react';
import { Tab, Tabs } from '@mui/material';

import CardTwo from '@/components/core/cards/CardTwo';
import BarChart from '@/components/core/charts/BarChart';
import LineChart from '@/components/core/charts/LineChart';
import SoldBatchesTable from '@/components/core/tables/SoldBatchesTable';
import { useUserAuthContext } from '@/providers/UserAuthProvider';
import { fetchAccessToken } from '@/util/tokenStorage';

import { BackButton } from '@/components/core/buttons/BackButton';
import { UserRole } from '@/util/constants/users';
import { getAssociations } from '@/services/association';
import { Association } from '@/util/models/BasicAssociation';
import { BasicSoldBatch } from '@/util/models/Batch/BasicSoldBatch';
import { getSoldBatches } from '@/services/batch';
import { Dataset } from '@/util/models/Dataset';
import { getTotalSalesGeneralGraph, getTotalSalesKgGraph } from '@/services/graphics';

export default function SoldBatches() {
  const { t } = useTranslation('translation');
  const [associations, setAssociations] = useState<Association[]>();
  const [selectedAssociation, setSelectedAssociation] = useState<number>(0);
  const [soldWeight, setSoldWeight] = useState<any>();
  const [soldBatches, setSoldBatches] = useState<BasicSoldBatch[]>([]);
  const [salesKg, setSalesKg] = useState<Dataset[]>([]);
  const [salesUsd, setSalesUsd] = useState<Dataset[]>([]);
  const { userRole } = useUserAuthContext();
  const router = useRouter();

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setSelectedAssociation(newValue);
  };

  useEffect(() => {
    if (!fetchAccessToken()) {
      // router.push('/');
    }
    
    switch(userRole) {
      case UserRole.project:
        getAssociations().then(assocs => setAssociations(assocs))
      return;
    }
  }, [userRole, router]);

  useEffect(() => {
    switch(userRole) {
      case UserRole.project:
        if(associations && selectedAssociation >= 1) {
          getSoldBatches(associations[selectedAssociation - 1].name).then(data => {
            setSoldBatches(data.basicBatches)
            setSoldWeight(data.kgDryCocoaSold);
            setSalesUsd(getTotalSalesGeneralGraph(data.monthlySalesInUSD));
            setSalesKg(getTotalSalesKgGraph(data.salesInKg));
          })
        } else if (associations && selectedAssociation == 0) {
          getSoldBatches().then(data => {
            setSoldBatches(data.basicBatches)
            setSoldWeight(data.kgDryCocoaSold);
            setSalesUsd(getTotalSalesGeneralGraph(data.monthlySalesInUSD));
            setSalesKg(getTotalSalesKgGraph(data.salesInKg));
          })
        }
        return;
      case UserRole.association:
        getSoldBatches().then(data => {
          setSoldBatches(data.basicBatches)
          setSoldWeight(data.kgDryCocoaSold);
          setSalesUsd(getTotalSalesGeneralGraph(data.monthlySalesInUSD));
          setSalesKg(getTotalSalesKgGraph(data.salesInKg));
        })
        return;
    }
  }, [userRole, associations, selectedAssociation]);

  return (
    <>
      <Head>
        <title>Aurora - Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="dashboard__container">
        <div>
          <BackButton/>
          <div className={`dashboard__cards`}>
            <CardTwo
              backgroundColor="#d0741a"
              number={soldWeight}
              text={t('sold_international_market')}
              icon={'/assets/kilogram.png'}
              alt={'Kilogram'}
            />
          </div>
        </div>
        <div className="dashboard__container-info">
         {  associations && userRole == UserRole.project ? 
              <Tabs
                value={selectedAssociation}
                onChange={handleChange}
                variant="scrollable"
                TabIndicatorProps={{
                  style: { display: 'none' },
                }}
                TabScrollButtonProps={{
                  style: { display: 'flex' },
                }}
                scrollButtons="auto"
                aria-label="scrollable auto tabs example"
              >
                <Tab key={-1} label={"All"} style={{ marginBottom: 10 }} />
                {associations.map((item, index) => (
                  <Tab key={index} label={item.name} style={{ marginBottom: 10 }} />
                ))}
              </Tabs> : "" 
          }
          <div className="dashboard__cards">
            <div className="dashboard__charts-production">
              <SoldBatchesTable batches={soldBatches}/>
            </div>
          </div>
          <div className="dashboard__charts">
            <div className="dashboard__charts-sales">
              <BarChart
                title={t('home.sales_kg')}
                datasets={salesKg}
                backgroundColor="#f39a1a98"
              />
            </div>
            <div className="dashboard__charts-sales">
              <LineChart
                title={t('home.total_sales_usd')}
                datasets={salesUsd}
                backgroundColor="#c9732190"
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
