import Head from 'next/head';
import { useRouter } from 'next/router';
import { useTranslation } from 'react-i18next';

import React, { useEffect, useState } from 'react';
import { saveAs } from 'file-saver';

import { Tab, Tabs } from '@mui/material';

import { BackButton } from '@/components/core/buttons/BackButton';
import CardTwo from '@/components/core/cards/CardTwo';
import BarChart from '@/components/core/charts/BarChart';
import LineChart from '@/components/core/charts/LineChart';
import SoldBatchesTable from '@/components/core/tables/SoldBatchesTable';
import { useUserAuthContext } from '@/providers/UserAuthProvider';
import { getAssociations } from '@/services/association';
import { downloadBatchesInExcel, getSoldBatches } from '@/services/batch';
import {
  getTotalSalesGeneralGraph,
  getTotalSalesKgGraph,
} from '@/services/graphics';
import { UserRole } from '@/util/constants/users';
import { Association } from '@/util/models/BasicAssociation';
import { BasicSoldBatch } from '@/util/models/Batch/BasicSoldBatch';
import { Dataset } from '@/util/models/Dataset';

export default function SoldBatches() {
  const { t } = useTranslation('translation');
  const [associations, setAssociations] = useState<Association[]>();
  const [selectedAssociation, setSelectedAssociation] = useState<number>(0);
  const [soldWeight, setSoldWeight] = useState<any>();
  const [soldBatches, setSoldBatches] = useState<BasicSoldBatch[]>([]);
  const [initialSoldBatches, setInitialSoldBatches] = useState<BasicSoldBatch[]>([]);
  const [salesKg, setSalesKg] = useState<Dataset[]>([]);
  const [salesUsd, setSalesUsd] = useState<Dataset[]>([]);
  const { userRole } = useUserAuthContext();
  const [batchCodeSearch, setBatchCodeSearch] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  const handleChange = (_: React.SyntheticEvent, newValue: number) => {
    setSelectedAssociation(newValue);
  };

  const setSearchValue = (event: any) => {
    setBatchCodeSearch(event.target.value)
  }

  const downloadSoldBatches = async () => {
    try {
      const response = await downloadBatchesInExcel(true);

      // Save the Blob response as a file using FileSaver.js
      saveAs(response.data, "Available Batches");
    } catch (err) {
      console.error(err);
    }
  };
  
  useEffect(() => {
    if (userRole && userRole === 'buyer') {
      router.push('/');
    }
  }, [userRole, router]);

  useEffect(() => {
    if (userRole)
      switch (userRole) {
        case UserRole.project:
          getAssociations().then((assocs) => setAssociations(assocs));
          if (associations && selectedAssociation >= 1) {
            getSoldBatches(associations[selectedAssociation - 1].name).then(
              (data) => {
                setSoldBatches(data.basicBatches);
                setSoldWeight(data.kgDryCocoaSold);
                setSalesUsd(getTotalSalesGeneralGraph(data.monthlySalesInUSD));
                setSalesKg(getTotalSalesKgGraph(data.salesInKg));
                setLoading(false);
              }
            );
          } else if (associations && selectedAssociation == 0) {
            getSoldBatches().then((data) => {
              setSoldBatches(data.basicBatches);
              setSoldWeight(data.kgDryCocoaSold);
              setSalesUsd(getTotalSalesGeneralGraph(data.monthlySalesInUSD));
              setSalesKg(getTotalSalesKgGraph(data.salesInKg));
              setLoading(false);
            });
          }
          return;
        case UserRole.association:
          getSoldBatches().then((data) => {
            setSoldBatches(data.basicBatches.filter((b : BasicSoldBatch) => b.batch.includes(batchCodeSearch)));
            setInitialSoldBatches(data.basicBatches);
            setSoldWeight(data.kgDryCocoaSold);
            setSalesUsd(getTotalSalesGeneralGraph(data.monthlySalesInUSD));
            setSalesKg(getTotalSalesKgGraph(data.salesInKg));
            setLoading(false);
          });
          return;
      }
  }, [userRole, associations, selectedAssociation]);

  useEffect(() => {
    setSoldBatches(initialSoldBatches.filter(b => b.batch.includes(batchCodeSearch)))
  }, [batchCodeSearch])

  return (
    <>
      <Head>
        <title>Aurora - Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="dashboard__container">
        <div>
          <BackButton />
          <div className={`dashboard__cards  dashboard__cards--main`}>
            <CardTwo
              backgroundColor="#f1852d"
              number={soldWeight}
              text={t('sold_international_market')}
              icon={'/assets/kilogram.png'}
              loading={loading}
              alt={'Kilogram'}
            />
            <button className={"dashboard__download-button"} onClick={downloadSoldBatches}>{t("buttons.download_sold_batches")}</button>
          </div>
        </div>
        <div className="dashboard__container-info">
          <div style={{display: "flex", justifyContent: "flex-end"}}>
            <input className="dashboard__search" type="text" placeholder={t("search") ?? ""} onChange={setSearchValue}/>
          </div>
          {associations && userRole == UserRole.project ? (
            <Tabs
              value={selectedAssociation}
              onChange={handleChange}
              variant="scrollable"
              TabIndicatorProps={{
                style: { display: 'none' },
              }}
              TabScrollButtonProps={{
                style: { display: 'flex' },
              }}
              scrollButtons="auto"
              aria-label="scrollable auto tabs example"
            >
              <Tab key={-1} label={t("home.all")} style={{ marginBottom: 10 }} />
              {associations.map((item, index) => (
                <Tab
                  key={index}
                  label={item.name}
                  style={{ marginBottom: 10 }}
                />
              ))}
            </Tabs>
          ) : (
            ''
          )}
          <div className="dashboard__cards">
            <div className="dashboard__charts-production">
              <SoldBatchesTable batches={soldBatches} />
            </div>
          </div>
          <div className="dashboard__charts">
            <div className="dashboard__charts-sales">
              <BarChart
                title={t('home.sales_kg')}
                datasets={salesKg}
                backgroundColor="#f39a1a98"
              />
            </div>
            <div className="dashboard__charts-sales">
              <LineChart
                title={t('home.total_sales_usd')}
                datasets={salesUsd}
                backgroundColor="#c9732190"
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
