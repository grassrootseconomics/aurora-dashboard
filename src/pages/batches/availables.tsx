import Head from 'next/head';
import { useRouter } from 'next/router';
import { useTranslation } from 'react-i18next';

import React, { useEffect, useState } from 'react';

import { Tab, Tabs } from '@mui/material';

import CardTwo from '@/components/core/cards/CardTwo';
import BarChart from '@/components/core/charts/BarChart';
import LineChart from '@/components/core/charts/LineChart';
import AvailableBatchesTable from '@/components/core/tables/AvailableBatchesTable';
import { useUserAuthContext } from '@/providers/UserAuthProvider';
import { Dataset } from '@/util/models/Dataset';
import { fetchAccessToken } from '@/util/tokenStorage';

import { BackButton } from '@/components/core/buttons/BackButton';
import { UserRole } from '@/util/constants/users';
import { getAssociations } from '@/services/association';
import { Association } from '@/util/models/BasicAssociation';
import { getAvailableBatches } from '@/services/batch';
import { BasicAvailableBatch } from '@/util/models/Batch/BasicAvailableBatch';
import { getProductionOfDryCocoa, getTotalPulpGraph } from '@/services/graphics';

export default function AvailableBatches() {
  const { t } = useTranslation('translation');
  const [associations, setAssociations] = useState<Association[]>();
  const [selectedAssociation, setSelectedAssociation] = useState<number>(0);
  const [availableWeight, setAvailableWeight] = useState<any>();
  const [availableBatches, setAvailableBatches] = useState<BasicAvailableBatch[]>([]);
  const [totalPulpCollected, setTotalPulpCollected] = useState<Dataset[]>([]);
  const [dryCocoaProduction, setDryCocoaProduction] = useState<Dataset[]>();
  const { userRole } = useUserAuthContext();
  
  const router = useRouter();

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setSelectedAssociation(newValue);
  };

  useEffect(() => {
    if (!fetchAccessToken()) {
      //router.push('/');
    }
    switch(userRole) {
      case UserRole.project:
       getAssociations().then(assocs => setAssociations(assocs));
       return;
    }
  }, [userRole, router]);

  useEffect(() => {
    switch(userRole) {
      case UserRole.project:
        if(associations && selectedAssociation >= 1) {
          getAvailableBatches(associations[selectedAssociation - 1].name).then(data => {
            setAvailableBatches(data.basicBatches)
            setAvailableWeight(data.kgDryCocoaAvailable);
            setDryCocoaProduction(getProductionOfDryCocoa(data.productionOfDryCocoa));
            setTotalPulpCollected(getTotalPulpGraph(data.monthlyCocoaPulp));
          })
        } else if (associations && selectedAssociation == 0) {
          getAvailableBatches().then(data => {
            setAvailableBatches(data.basicBatches)
            setAvailableWeight(data.kgDryCocoaAvailable);
            setDryCocoaProduction(getProductionOfDryCocoa(data.productionOfDryCocoa));
            setTotalPulpCollected(getTotalPulpGraph(data.monthlyCocoaPulp));
          })
        }
        return;
      case UserRole.association:
        getAvailableBatches().then(data => {
          setAvailableBatches(data.basicBatches)
          setAvailableWeight(data.kgDryCocoaAvailable);
          setDryCocoaProduction(getProductionOfDryCocoa(data.productionOfDryCocoa));
          setTotalPulpCollected(getTotalPulpGraph(data.monthlyCocoaPulp));
        })
        return;
    }
  }, [userRole, associations, selectedAssociation]);


  return (
    <>
      <Head>
        <title>Aurora - Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="dashboard__container">
        <div>
          <BackButton/>
          <div className={`dashboard__cards`}>
            <CardTwo
              backgroundColor="#d0741a"
              number={availableWeight}
              text={t('dry_cocoa_available')}
              icon={'/assets/kilogram.png'}
              alt={'Kilogram'}
            />
          </div>
        </div>
        <div className="dashboard__container-info">
          {  associations && userRole == UserRole.project ? 
              <Tabs
                value={selectedAssociation}
                onChange={handleChange}
                variant="scrollable"
                TabIndicatorProps={{
                  style: { display: 'none' },
                }}
                TabScrollButtonProps={{
                  style: { display: 'flex' },
                }}
                scrollButtons="auto"
                aria-label="scrollable auto tabs example"
              >
                <Tab key={-1} label={"All"} style={{ marginBottom: 10 }} />
                {associations.map((item, index) => (
                  <Tab key={index} label={item.name} style={{ marginBottom: 10 }} />
                ))}
              </Tabs> : "" 
          }
          <div className="dashboard__cards">
            <div className="dashboard__charts-production">
              {
                availableBatches ? 
                  <AvailableBatchesTable batches={availableBatches}/> :
                  ""
              }
            </div>
          </div>
          <div className="dashboard__charts">
            { totalPulpCollected ? 
                <div className="dashboard__charts-sales">
                  <BarChart
                    title={t('cocoa_pulp_collected')}
                    datasets={totalPulpCollected}
                    backgroundColor="#f39a1a98"
                  />
                </div> : "" 
            }
            { dryCocoaProduction ? 
                <div className="dashboard__charts-sales">
                  <LineChart
                    title={t('dry_cocoa_production')}
                    datasets={dryCocoaProduction}
                    backgroundColor="#c9732190"
                  />
                </div> : "" 
            }
          </div>
        </div>
      </div>
    </>
  );
}
